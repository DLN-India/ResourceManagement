@using Fritz.ResourceManagement.Domain
<div class="monthpicker">

	<button id="prevMonth" onclick="@PrevMonth">&lt;</button>
	<div id="name">@SelectedDate.ToString("MMMM yyyy")</div>
	<button id="nextMonth" onclick="@NextMonth">&gt;</button>

	<span class="day">Su</span>
	<span class="day">M</span>
	<span class="day">Tu</span>
	<span class="day">W</span>
	<span class="day">Th</span>
	<span class="day">F</span>
	<span class="day">Sa</span>

	@for (var i = 0; i < FirstDayOfMonthDoW; i++)
	{
		<span></span>
	}

	@for (var i = 1; i <= LastDayOfMonth; i++)
	{

		var thisDay = new DateTime(SelectedDate.Year, SelectedDate.Month, i);
		var today = (thisDay.Date == DateTime.Today.Date) ?
			"today" : null;
		var todayTitle = (string.IsNullOrEmpty(today)) ? null : "Today!";
		var hasAppt = MySchedule.ScheduleItems.Any(i => i.StartDateTime.Date == thisDay.Date) ?
			"appt" : null;

		<span class="@today @hasAppt" title="@todayTitle">@i</span>
	}

</div>
<button id="gotoToday" onclick="@GotoToday">Today</button>

@functions {

	[CascadingParameter(Name ="SelectedDate")]
	DateTime SelectedDate { get; set; } = DateTime.Today;

	[CascadingParameter(Name ="MySchedule")]
	Schedule MySchedule { get; set; } = null;

	int FirstDayOfMonthDoW
	{
		get
		{

			var first = new DateTime(SelectedDate.Year, SelectedDate.Month, 1);
			return (int)first.DayOfWeek;

		}
	}

	int LastDayOfMonth
	{
		get
		{
			return new DateTime(SelectedDate.Year, SelectedDate.Month, 1).AddMonths(1).AddDays(-1).Day;
		}
	}

	void PrevMonth()
	{
		SelectedDate = SelectedDate.AddMonths(-1);
		SelectedDate = new DateTime(SelectedDate.Year, SelectedDate.Month, 1);
	}

	void NextMonth()
	{
		SelectedDate = SelectedDate.AddMonths(1);
		SelectedDate = new DateTime(SelectedDate.Year, SelectedDate.Month, 1);
	}

	void GotoToday()
	{
		SelectedDate = DateTime.Today;
	}

}